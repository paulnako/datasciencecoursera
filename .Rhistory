demo()
vector()
vector()
vector()
1/0
1/Inf
print(x)
x <- 1
print(x)
x
msg<-"hello"
x<-
x<-5
x
pring(x)
print(x)
x<-1:20
x
x<--1:20
x
x<--1:-20
x
x<-c(0.5,0.6) ##numeric
x
x<-c(T,F) ##numeric
x
x<-c(1+0i,2+4i) ##complex
x
y<-c(TRUE,2)
y
y<-c("a",TRUE)
y
x-<0:6
x-<0:6
x<-0:6
class(x)
as.numeric(x)
as.character(x)
as.complex(x)
x<-c("a","b","c")
as.numeric(x)
m<-matrix(nrow=2,ncol=3)
m
dim(m)
m<-matric(1:6,nrow=2,ncol=3)
m<-matrix(1:6,nrow=2,ncol=3)
m
m<-1:10
m
dim(m)<-c(2,5)
m
x<-1:3
y<-10:12
cbind(x,y)
cbind(x,y)<-m
x<-list(1,"a",TRUE,1+4i)
x
x<-factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
print(x)
is.na(x)
is.nan()
is.nan(x)
x<-1:3
names(x)
names(x)<-c("foo","bar","Norf")
x
x<-1+2
wdir()
if(x>3) {y<-10} else y<-0
if(x>=3) {y<-10} else y<-0
if(x>3) {y<-9}
y
if(x>3) {y<-9}
if(x>5) {y<-9}
y
str(if)
summary[if]
summary(if)
summary(if())
summary(if())
summaryif())
if(x>1) {print("x is big")} else {"x is not"}
x<--2L
x<--2
if(x>1) {print("x is big")} else {"x is not"}
for(i in 1:10) {print(i)}
x<-c("a","b","c","d")
for(i in seq_along(x)) {print(x[i])}
for(i in seq_along(x)) {print(i)}
for(letter in x){print(letter)}
x<-matrix(1:6,2,3)
x
for(i in seq_len(nrow(x))){for(j in seq_len(ncol(x)))} {print(x[i,j])}
for(i in 10:1) {print(i)}
count<0
count<-0
while(count<10) {print(count)}
count<-0
while(count<0) {print(count) count<-count+1}
}
}
while(count<10) {
while(count<10) {
print(count)
count<-count+1
}
count
count<-
count<-0
count<-count+1
}
z<-5
}
while(z>=3 && <=10){
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if(coin==1){
z<-z+1
} else {z<-z-1
}
}
str(rbinom)
x0<-1
tol<-1e-8
}else{x0<-x1}
}
repeat{
x1 <- computeEstimate()
if(abs(x1-x0)<tol){
break}
else{x0<-x1}
}
repeat{
x1 <- computeEstimate()
if(abs(x1-x0)<tol){
break}
else{x0<-x1}
}
x1 <- computeestimate()
print(i)
for(i in 1:100){
if(i<=20){next}
print(i)
}
wdir()
dir()
x<-"suck mah dick"
f<-function(x) {print(x)}
f
formals()
args(sd)
mydata<-rnorm(100)
mydata
sd(x=mydata,na.rm=FALSE)
sd(mydata)
print(x)
args(lm)
lm(mydata)
lm(y~x,mydata,model=FALSE)
lm(y~x,mydata,model=FALSE,1:100)
lm(y~x,mydata,1:100,model=FALSE)
search()
}
f<-function(x,y) {
x^2+y/z
}
f
x<-2+y
y<-2
x<-2+y
f
str(data.frame)
summary(data.frame)
f<-function(x^2)
f<-function(x) {x^2}
f^2
f
x<-2
f
f(x)
environment(f)
environment(r_GlobalEnv)
environment(<r_GlobalEnv>)
environment(<R_GlobalEnv>)
environment(R_GlobalEnv)
parent.env(environment(f))
make.power<-function(n) {pow<-function(x){x^n}pow}
make.power<-function(n) {
pow<-function(x){
x^n
}
pow
}
cube<-make.power(3)
cube
cube(3)
lk(environment(cube))
ls(environment(cube))
get("n",environment(cube))
y<-10
y^2+g(x)}
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x) {x*y}
f(3)
?if()
?if
print "hello world"
print "hello world"
print 'hello world'
print x
x <- "Hello World!"
print x
print(x)
print("Hello World!")
## This is a markdown file
install.packages(knitr)
install.packages("knitr"")
#### This is a markdown file
#### This is a markdown file
#### This is a markdown file
library (knitr)
#### This is a markdown file
library ("knitr"")
#### This is a markdown file
library ("knitr")
#### This is a markdown file
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
## This is a markdown file
setwd("~/datasciencecoursera")
install.packages("KernSmooth")
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
?biocUpgrade
library(biocLite)
library(BiocInstaller)
?biocUpgrade
source(kernsmooth)
source(KernSmooth)
library(KernSmooth)
